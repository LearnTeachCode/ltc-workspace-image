---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
    # Detect if we are running on a WSL2 environment
  - name: Verify install_files is present
    debug: msg="install_files/_README = {{ lookup('file', '/home/kasm-default-profile/install_files/_README') }}"
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")  
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\[\033[00;32m\][\w]\$\[\033[00m\] "'
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

-
  # install chrome
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_chrome

  tasks:
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

  roles:
    - role: webarchitect609.google_chrome

-
  # install firefox
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
    - install_firefox

  vars:
    firefox_profiles:
      default:
        extensions:
          - ublock-origin
        preferences:
          network.cookie.cookieBehavior: 1
          privacy.donottrackheader.enabled: true
          datareporting.healthreport.uploadEnabled: false
      secondprofile:
        extensions:
          - adblock-plus
        preferences:
          privacy.donottrackheader.enabled: false
          privacy.trackingprotection.enabled: false
          signon.rememberSignons: false
          datareporting.healthreport.uploadEnabled: false

  tasks:
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

  pre_tasks:
  - name: Update apt packages
    apt:
      update_cache: yes

  roles:
    - role: staticdev.firefox

-
  # install keychain, git, and @capsulecorplab .vimrc and .gitconfig
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_utilities

  vars:
    git_version: "2.43.0"
    git_version_to_install: "1:{{ git_version }}-1ubuntu7"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-4"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Add git PPA
    shell: add-apt-repository ppa:git-core/ppa
  - name: Install git
    apt:
      name: git
  - name: Install Git Bash Completion
    apt:
      name: bash-completion
      update_cache: yes
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: install ping
    apt:
      name: iputils-ping
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell:
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected
  - name: Install @capsulecorplab .vimrc
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/495058e7a57ed8adaed3c40c80d09739/raw/4a6e6f6ff92b96919be111c9cbb5a4a21ab472d2/.vimrc
      dest: /home/kasm-default-profile/
  - name: Install @capsulecorplab .gitconfig
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/401ba2fe0857a328f2a626adbf078cc6/raw/b89a6234f0d620ff60bcfe37f95de197b8772377/.gitconfig
      dest: /home/kasm-default-profile/
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

-
  # install Python packages with pip
  hosts: localhost
  connection: local
  gather_facts: yes

  tasks:
  - name: Update OS to point python to python3
    apt:
      name: python-is-python3
      update_cache: yes
  - name: Install pip for python3 with Apt
    apt:
      name: python3-pip
      update_cache: yes
  - name: Install python packages with pip
    pip:
      name:
        - jupyterlab
        - notebook
        - voila
        - pint
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

-
  # Install NodeJS Tools
  hosts: localhost
  connection: local
  gather_facts: yes
  tags:
  - install_node
  - install_doctools

  vars:
    node_version: "20.11.1"
    v_node_version: "v{{ node_version }}"
    npm_version: "10.2.4"
    npx_version: "10.2.4"
    yarn_version: "3.5.0"
    yo_version: "4.3.1"
    generator_code_version: "1.7.5"
    oclif_version: "4.3.6"
    typescript_version: "5.1.3"
    cli_njk_version: "1.0.0"

  tasks:   # Test Node JS Tools versions
  - name: Install Yarn
    shell: "corepack enable && corepack prepare yarn@{{ yarn_version }} --activate"
  - name: Get node version
    shell: node --version
    register: installed_node_version
  - name: Get npm version
    shell: npm --version
    register: installed_npm_version
  - name: Get npx installed version
    shell: npx --version
    register: installed_npx_version
  - name: Get yarn version
    shell: yarn --version
    register: installed_yarn_version
  - name: Get oclif version
    shell: oclif --version 2>/dev/null | sed 's/\ /\n/g' | grep oclif | sed 's/\///g' | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_oclif_version
  - name: Get TypeScript Compiler version
    shell: tsc --version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_tsc_version
  - name: Get cli-njk version
    shell: njk --version
    register: installed_cli_njk_version
  - name: Display node tool versions
    debug:
      msg: "Node = {{ installed_node_version.stdout }} | npm = {{ installed_npm_version.stdout }} | npx = {{ installed_npx_version.stdout }} | yarn = {{ installed_yarn_version.stdout }}"
  - name: Display TypeScript Compiler version
    debug:
      msg: "tsc = {{ installed_tsc_version.stdout }}"
  - name: Display cli-njk version
    debug:
      msg: "cli-njk = {{ installed_cli_njk_version.stdout }}"
  - name: Test node version
    fail:
      msg: "NodeJS Version Error: Expected {{ v_node_version }} | Found {{ installed_node_version.stdout }}"
    when: installed_node_version.stdout != v_node_version
  - name: Test npm version
    fail:
      msg: "NPM Version Error: Expected {{ npm_version }} | Found {{ installed_npm_version.stdout }}"
    when: installed_npm_version.stdout != npm_version
  - name: Test npx version
    fail:
      msg: "NPX Version Error: Expected {{ npx_version }} | Found {{ installed_npx_version.stdout }}"
    when: installed_npx_version.stdout != npx_version
  - name: Test yarn version
    fail:
      msg: "Yarn Version Error: Expected {{ yarn_version }} | Found {{ installed_yarn_version.stdout }}"
    when: installed_yarn_version.stdout != yarn_version
  - name: Test oclif version
    fail:
      msg: "oclif Version Error: Expected {{ oclif_version }} | Found {{ installed_oclif_version.stdout }}"
    when: installed_oclif_version.stdout != oclif_version
    when: installed_yarn_version.stdout != yarn_version
  - name: Test TypeScript Compiler version
    fail:
      msg: "TypeScript Compiler Version Error: Expected {{ typescript_version }} | Found {{ installed_tsc_version.stdout }}"
    when: installed_tsc_version.stdout != typescript_version
  - name: Test cli-njk version
    fail:
      msg: "cli-njk Version Error: Expected {{ cli_njk_version }} | Found {{ installed_cli_njk_version.stdout }}"
    when: installed_cli_njk_version.stdout != cli_njk_version
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

  roles:
  - role: grzegorznowak.nvm_node
    nvm_install_script_version: "0.39.3"
    nvm_node_version: "{{ node_version }}"
    nvm_install_globally:
    - name: yo
      version: "{{ yo_version }}"
    - name: generator-code
      version: "{{ generator_code_version }}"
    - name: oclif
      version: "{{ oclif_version }}"
    - name: typescript
      version: "{{ typescript_version }}"
    - name: cli-njk
      version: "{{ cli_njk_version }}"

- 
  # install sudo for the vs-code role below 
  hosts: localhost
  connection: local

  tasks:
  - name: Install Sudo
    apt:
      name: sudo
      update_cache: yes
  - name: Preserve DONT_PROMPT_WSL_INSTALL in sudoers
    lineinfile:
      path: "/etc/sudoers"
      line: "Defaults        env_keep += \"DONT_PROMPT_WSL_INSTALL\""
    when: wsl2_environment
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

-
# add dev user to give vs code somewhere to install extensions
  hosts: localhost
  connection: local

  tasks:
  - name: Add dev user
    user:
      name: dev
      uid: 1001
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

-
  # install the remainder of the tools
  hosts: localhost
  connection: local
  environment: 
    DONT_PROMPT_WSL_INSTALL: 1

  tasks:
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

  roles:
    - role: gantsign.visual-studio-code
      users:
        - username: "dev"
          visual_studio_code_extensions:
            - ms-python.python
            - dendron.dendron
            - foam.foam-vscode
          visual_studio_code_settings_overwrite: yes
          visual_studio_code_settings: {
            "extensions.ignoreRecommendations": true,
            "update.mode": "none",
            "extensions.autoUpdate": false,
            "extensions.autoCheckUpdates": false,
            "terminal.integrated.profiles.linux": {
              "bash (login)": {
                "path": "bash",
                "args": ["-l"]
                }
              },
            "terminal.integrated.defaultProfile.linux": "bash (login)" 
          }  

-
  # Copy VS Code changes to kasm-default-profile and lean up (remove) dev user now that vs code is installed
  hosts: localhost
  connection: local
  tasks:
  - name: Copy VS Code changes to kasm-default-profile
    shell: 
      cmd: cp -r /home/dev/.config/Code/ /home/kasm-default-profile/.config/Code/ && cp -r /home/dev/.vscode/ /home/kasm-default-profile/.vscode/
  - name: Remove dev user
    user:
      name: dev
      state: absent
      remove: yes 
  - name: Get disk usage
    shell: df -h
    register: disk_usage
  - name: Display disk usage
    debug:
      msg: "{{ disk_usage.stdout }}"

# Three dots indicate the end of a YAML document
...
